
Intro
=====

A data binding framework that generates type-safe binding classes.

Or, OGNL with no strings.

A test case:

    public void testEmployerThroughEmployee() {
        Employer er = new Employer();
        er.name = "at&t";

        Employee ee = new Employee();
        ee.name = "bob";
        ee.employer = er;

        EmployeeBinding eb = new EmployeeBinding(ee); // EmployeeBinding is generated by bindgen
        eb.name(); // name() returns a StringBinding instance instead of the actual name String

        // During rendering TextBox calls StringBinding.get()
        Assert.assertEquals("bob", new TextBox(eb.name()).toString());
        Assert.assertEquals("at&t", new TextBox(eb.employer().name()).toString());

        // During POST procesing TextBox calls StringBinding.set()
        new TextBox(eb.name()).set("newBob");
        new TextBox(eb.employer().name()).set("newAt&t");
        Assert.assertEquals("newBob", ee.name);
        Assert.assertEquals("newAt&t", er.name);
    }

The point being that `eb.employer().name()` does not immediately return the value of `name`, but instead returns a `StringBinding` that the web framework can bind values into/out of as it serves the request.

Annotations
===========

Bindgen is implemented as JDK6 annotation processor. When configured in your IDE (e.g. with project-specific settings in Eclipse), as soon as you add a `@Bindable` annotation to a class `Foo`, and hit save, the IDE immediately invokes the [BindgenAnnotationProcessor][2] behind the scenes and `FooBinding` is created.

[2]: master/bindgen/src/org/exigencecorp/bindgen/processor/BindgenAnnotationProcessor.java

Another Example
===============

This is a spike from a [Click][1]-like web framework I'm hacking around on:

    @Bindable
    public class HomePage extends AbstractPage {

        public Form form = new Form("Login");
        public String username = "blah";
        public String password;
        private HomePageBinding bind = new HomePageBinding(this);

        @Override
        public void onInit() {
            this.form.add(new TextField(this.bind.username()));
            this.form.add(new TextField(this.bind.password()));
            this.form.add(new SubmitField(this.bind.submit()));
        }

        public void submit() {
            // do stuff with this.username and this.password
        }
    }

The `HomePageBinding` class is auto-generated because of the `@Bindable` annotation on the `HomePage` class.

When the form POSTs, the TextFields call the `Binding.set` methods with their form values, which populates the `this.username` and `this.password` fields.

Fun things like type conversion using `Binding.getType()` method to go from strings -> whatever would be possible too.

[1]: http://click.sf.net

Gotchas
=======

* Eclipse: Annotating packages as `@Bindable` does not work until 3.5-M5
* Eclipse: Clean builds cause compile errors if your `Foo` class references its own `FooBinding` (see [263985][3]) *and* you declare `FooBinding` as a field/method return--for now declaring `FooBinding` inside a method as a local variable works fine
* IntelliJ: Does not support annotation processors (from what I can tell)

[3]: https://bugs.eclipse.org/bugs/show_bug.cgi?id=263985

Todo
====

* Support extension methods, e.g. StringBinding could have extra methods like `length()`, `substring()`, etc., ideally configurable

* Optional null-safe get/set, e.g. `eb.employer().name()` with a null `employer` could have `get()` return `null` and not NPE and `set()` could create a `new Employer()` to then call `setName()` on to again avoid the NPE

